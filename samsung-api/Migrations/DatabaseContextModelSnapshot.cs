// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using samsung.api.DataSource;

namespace samsung.api.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    partial class DatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("samsung.api.DataSource.Models.Image", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasKey("Id");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("samsung.api.DataSource.Models.Profile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("City");

                    b.Property<string>("ConcurrencyStamp");

                    b.Property<string>("Email");

                    b.Property<string>("EmailAddress");

                    b.Property<bool>("EmailConfirmed");

                    b.Property<int>("FacebookId");

                    b.Property<string>("FirstName");

                    b.Property<int?>("ImageId");

                    b.Property<string>("LastName");

                    b.Property<int>("LinkedInId");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail");

                    b.Property<string>("NormalizedUserName");

                    b.Property<string>("PasswordHash");

                    b.Property<string>("Phone");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<int>("TechLevel");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName");

                    b.HasKey("Id");

                    b.HasIndex("ImageId");

                    b.ToTable("Profiles");
                });

            modelBuilder.Entity("samsung_api.DataSource.Models.Buddies", b =>
                {
                    b.Property<int>("ReceivingProfileId");

                    b.Property<int>("RequestingProfileId");

                    b.Property<int>("RequestState");

                    b.HasKey("ReceivingProfileId", "RequestingProfileId");

                    b.HasIndex("ReceivingProfileId")
                        .IsUnique();

                    b.HasIndex("RequestingProfileId")
                        .IsUnique();

                    b.ToTable("Buddies");
                });

            modelBuilder.Entity("samsung.api.DataSource.Models.Profile", b =>
                {
                    b.HasOne("samsung.api.DataSource.Models.Image", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId");
                });

            modelBuilder.Entity("samsung_api.DataSource.Models.Buddies", b =>
                {
                    b.HasOne("samsung.api.DataSource.Models.Profile", "ReceivingProfile")
                        .WithOne()
                        .HasForeignKey("samsung_api.DataSource.Models.Buddies", "ReceivingProfileId");

                    b.HasOne("samsung.api.DataSource.Models.Profile", "RequestingProfile")
                        .WithOne()
                        .HasForeignKey("samsung_api.DataSource.Models.Buddies", "RequestingProfileId");
                });
#pragma warning restore 612, 618
        }
    }
}
